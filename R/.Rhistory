algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15),
max_edge = c(0, 1.5),
subcircle = 0.2))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .3, type = "Gaus"))
plot(chm_smooth, col = viridisLite::viridis(n = 50))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
plot(chm_smooth, col = viridisLite::viridis(n = 50))
# Create CHMs for 60 m tiles
rm(list = ls())
# load packages
list_of_packages <- c("sf", "tidyverse", "lidR", "terra", "rgdal")
new_packages <- list_of_packages[!(list_of_packages %in%
installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# list files
work_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\tile_60m\\"
chm_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\chm_60m\\"
las_60 <- list.files(paste0(work_dir),
pattern = ".las")
for (i in 1:length(las_60)) {
f_name <- unlist(strsplit(las_60, split = ".las"))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15),
max_edge = c(0, 1.5),
subcircle = 0.2))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
#plot(chm)
png(filename = paste0(chm_dir,
f_name[i], ".png"), res = 70)
plot(chm_smooth, col = viridisLite::viridis(n = 50))
dev.off()
writeRaster(x = chm_smooth,
filename = paste0(chm_dir,
f_name[i], ".tiff"), overwrite = TRUE)
}
?pitfree
plot(chm_smooth, col = viridisLite::viridis(n = 50))
i = 3
f_name <- unlist(strsplit(las_60, split = ".las"))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15, 20, 25),
max_edge = c(0, 1.5),
subcircle = 0.25))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
plot(chm_smooth, col = viridisLite::viridis(n = 50))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15, 20, 25),
max_edge = c(0, 1.5),
subcircle = 0.2))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
plot(chm_smooth, col = viridisLite::viridis(n = 50))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15, 20, 25),
max_edge = c(0, 1.5),
subcircle = 0.25))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
plot(chm_smooth, col = viridisLite::viridis(n = 50))
# Create CHMs for 60 m tiles
rm(list = ls())
# load packages
list_of_packages <- c("sf", "tidyverse", "lidR", "terra", "rgdal")
new_packages <- list_of_packages[!(list_of_packages %in%
installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# list files
work_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\tile_60m\\"
chm_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\chm_60m\\"
las_60 <- list.files(paste0(work_dir),
pattern = ".las")
for (i in 1:length(las_60)) {
f_name <- unlist(strsplit(las_60, split = ".las"))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15, 20, 25),
max_edge = c(0, 1.5),
subcircle = 0.25))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"))
#plot(chm)
png(filename = paste0(chm_dir,
f_name[i], ".png"), res = 70)
plot(chm_smooth, col = viridisLite::viridis(n = 50))
dev.off()
writeRaster(x = chm_smooth,
filename = paste0(chm_dir,
f_name[i], ".tiff"), overwrite = TRUE)
}
# load packages
list_of_packages <- c("sf", "tidyverse", "lidR", "terra", "rgdal")
new_packages <- list_of_packages[!(list_of_packages %in%
installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
?rasterize_canopy
?focal
# Create CHMs for 60 m tiles
rm(list = ls())
# load packages
list_of_packages <- c("sf", "tidyverse", "lidR", "terra")
new_packages <- list_of_packages[!(list_of_packages %in%
installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# list files
work_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\tile_60m\\"
chm_dir <- "Y:\\users\\L2682\\juuka_ruovesi_2018_clip_dz\\chm_60m\\"
las_60 <- list.files(paste0(work_dir),
pattern = ".las")
for (i in 1:length(las_60)) {
f_name <- unlist(strsplit(las_60, split = ".las"))
chm <- lidR::rasterize_canopy(las = readLAS(paste0(work_dir,
las_60[i])), res = .5,
algorithm = pitfree(thresholds = c(0, 2, 5, 10, 15, 20, 25),
max_edge = c(0, 1.5),
subcircle = 0.25))
chm_smooth <- focal(x = chm, w = focalMat(x = chm, d = .4, type = "Gaus"),
na.rm = TRUE)
#plot(chm)
png(filename = paste0(chm_dir,
f_name[i], ".png"), res = 70)
plot(chm_smooth, col = viridisLite::viridis(n = 50))
dev.off()
writeRaster(x = chm_smooth,
filename = paste0(chm_dir,
f_name[i], ".tiff"), overwrite = TRUE)
}
load("C:/Users/03223294/Desktop/Juuka_Referenssikoealat/smk_koealat.RData")
View(PAIKANNUS)
View(LUKUPUU)
View(LUKUPUU)
write.table(LUKUPUU, "C://Temp//lukupuut_smk_remove.txt", col'')
write.table(LUKUPUU, "C://Temp//lukupuut_smk_remove.txt", col.names = TRUE, row.names = F)
rm(list=ls())
setwd("C:/Users/03223294/git_repos/als2metrics/R/") # Set the working directory R files
source("als2metrics.R")                # Import required functions
als2metrics( "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\smk_circplots_dz.txt",     # ALS data file
T,                        # Compute first echo metrics
T,                        # Compute last echo metrics
T,                        # Compute intermediate echo metrics
T,                        # Compute all echo metrics
T,                        # Compute proportions of echo categories
T,                        # Compute basic statistics
seq(0.05,0.95,0.05),      # Vector of percentiles
T,                        # Compute densities
c(0.5,2,5,10,15,20),      # Vector of heights in fixed height densities
T,                        # Compute intensity statistics
T,                        # Compute intensity percentiles
0,                      # Cutoff threshold
10,                       # Minimum number of echoes
"Y:\\users\\L2682\\plot_metrics\\smkplots_als2018\\smkplots_als2018_cut0.txt"         # Output file having ALS metrics
)
rm(list=ls())
setwd("C:/Users/03223294/git_repos/als2metrics/R/") # Set the working directory R files
source("als2metrics.R")                # Import required functions
als2metrics( "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\smk_circplots_dz.txt",     # ALS data file
T,                        # Compute first echo metrics
T,                        # Compute last echo metrics
T,                        # Compute intermediate echo metrics
T,                        # Compute all echo metrics
T,                        # Compute proportions of echo categories
T,                        # Compute basic statistics
seq(0.05,0.95,0.05),      # Vector of percentiles
T,                        # Compute densities
c(0.5,2,5,10,15,20),      # Vector of heights in fixed height densities
T,                        # Compute intensity statistics
T,                        # Compute intensity percentiles
1.3,                      # Cutoff threshold
10,                       # Minimum number of echoes
"Y:\\users\\L2682\\plot_metrics\\smkplots_als2018\\smkplots_als2018_cut0.txt"         # Output file having ALS metrics
)
rm(list=ls())
setwd("C:/Users/03223294/git_repos/als2metrics/R/") # Set the working directory R files
source("als2metrics.R")                # Import required functions
als2metrics( "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\smk_circplots_dz.txt",     # ALS data file
T,                        # Compute first echo metrics
T,                        # Compute last echo metrics
T,                        # Compute intermediate echo metrics
T,                        # Compute all echo metrics
T,                        # Compute proportions of echo categories
T,                        # Compute basic statistics
seq(0.05,0.95,0.05),      # Vector of percentiles
T,                        # Compute densities
c(0.5,2,5,10,15,20),      # Vector of heights in fixed height densities
T,                        # Compute intensity statistics
T,                        # Compute intensity percentiles
0,                      # Cutoff threshold
10,                       # Minimum number of echoes
"Y:\\users\\L2682\\plot_metrics\\smkplots_als2018\\smkplots_als2018_cut0.txt"         # Output file having ALS metrics
)
rm(list=ls())
setwd("C:/Users/03223294/git_repos/als2metrics/R/") # Set the working directory R files
source("als2metrics.R")                # Import required functions
als2metrics( "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\smk_circplots_dz.txt",     # ALS data file
T,                        # Compute first echo metrics
T,                        # Compute last echo metrics
T,                        # Compute intermediate echo metrics
T,                        # Compute all echo metrics
T,                        # Compute proportions of echo categories
T,                        # Compute basic statistics
seq(0.05,0.95,0.05),      # Vector of percentiles
T,                        # Compute densities
c(0.5,2,5,10,15,20),      # Vector of heights in fixed height densities
T,                        # Compute intensity statistics
T,                        # Compute intensity percentiles
1.3,                      # Cutoff threshold
10,                       # Minimum number of echoes
"Y:\\users\\L2682\\plot_metrics\\smkplots_als2018\\smkplots_als2018_cut13.txt"         # Output file having ALS metrics
)
rm(list=ls())
require(data.table)
require(tidyverse)
work_folder <- "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\"
als_data <- fread(paste0(work_folder,
"smk_circplots_dz.txt"))
# Loop over plots and compute some additional metrics
# Cover indices: FCI; LCI
# average square height: qav: sum(X^2)/n
# vc with 1 and 2 meter bins
unique_plots <- unique(als_data$V1)
out_frame <- data.frame(plot_cell_id = unique_plots,
fci_korhetal2011_1.3m = 0,
lci_korhetal2011_1.3m = 0,
sci_solbergetal2009 = 0,
dns_1.3m = 0,
cov_1.3m = 0,
f_gav = 0,
l_gav = 0,
i_gav = 0,
vc_1m = 0,
vc_2m = 0)
for (i in 1:length(unique_plots)) {
plot_points <- als_data[V1 == unique_plots[i], ]
first <- plot_points[V7 == 0 | V7 == 1]
last <- plot_points[V7 == 0 | V7 == 3]
mid <- plot_points[V7 == 2]
# gav
gav <- function (x) {sum(x^2) / length(x)}
# fci Korhonen et al. 2011
fci_lci <- function (als, threshold = 1.3) {
# fci
R_Tsingle <- nrow(als[V7 == 0 & V5 >= threshold])
R_Tfirst <- nrow(als[V7 == 1 & V5 >= threshold])
R_allsingle <- nrow(als[V7 == 0])
R_allfirst <- nrow(als[(V7 == 1)])
# lci
R_Tlast <- nrow(als[V7 == 3 & V5 >= threshold])
R_alllast <- nrow(als[(V7 == 3)])
return(data.frame(fci = (R_Tsingle + R_Tfirst) / (R_allsingle + R_allfirst),
lci = (R_Tsingle + R_Tlast) / (R_allsingle + R_alllast)))
}
cov_dns <- function (als, threshold = 1.3) {
Tfirst <- nrow(als[(V7 == 1 | V7 == 0) & V5 >= threshold])
all_first <- nrow(als[(V7 == 1 | V7 == 0)])
all_T <-   nrow(als[V5 >= threshold])
all <- nrow(als)
return(data.frame(cov = Tfirst / all_first * 100,
dns = all_T / all * 100))
}
solbergcover <- function(als) {
single_ground <- nrow(als[V9 == 2 & V7 == 0])
single_all <- nrow(als[V7 == 0])
first_ground <- nrow(als[V9 == 2 & V7 == 1])
last_ground <- nrow(als[V9 == 2 & V7 == 3])
first_all <- nrow(als[V7 == 1])
last_all <- nrow(als[V7 == 3])
upper <- single_ground + 0.5 * (first_ground + last_ground)
bottom <- single_all + 0.5 * (first_all + last_all)
return(1 - upper / bottom)
}
vc <- function(als, bin = 1) {
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
bins <- cut(als$V5, breaks = seq(0, maxbin, bin), right = FALSE,
labels = (seq(0, (maxbin - bin), bin) + bin / 2))
# remove NAs that are outside the "complete" bins
bins <- bins[!is.na(bins)]
fracts <- as.numeric(table(bins) / sum(table(bins)))
nbins <- length(fracts)
vc <- -sum(fracts * log(fracts) / log(nbins))
return(vc)
}
out_frame[i, "fci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$fci
out_frame[i, "lci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$lci
out_frame[i, "sci_solbergetal2009"] <- solbergcover(als = plot_points)
out_frame[i, "dns_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$dns
out_frame[i, "cov_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$cov
out_frame[i, "f_gav"] <- gav(x = first$V5)
out_frame[i, "l_gav"] <- gav(x = last$V5)
out_frame[i, "i_gav"] <- gav(x = mid$V5)
out_frame[i, "vc_1m"] <- vc(als = plot_points, bin = 1)
out_frame[i, "vc_2m"] <-   vc(als = plot_points, bin = 2)
}
maxbin
i
solbergcover <- function(als) {
single_ground <- nrow(als[V9 == 2 & V7 == 0])
single_all <- nrow(als[V7 == 0])
first_ground <- nrow(als[V9 == 2 & V7 == 1])
last_ground <- nrow(als[V9 == 2 & V7 == 3])
first_all <- nrow(als[V7 == 1])
last_all <- nrow(als[V7 == 3])
upper <- single_ground + 0.5 * (first_ground + last_ground)
bottom <- single_all + 0.5 * (first_all + last_all)
return(1 - upper / bottom)
}
vc <- function(als, bin = 1) {
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
bins <- cut(als$V5, breaks = seq(0, maxbin, bin), right = FALSE,
labels = (seq(0, (maxbin - bin), bin) + bin / 2))
# remove NAs that are outside the "complete" bins
bins <- bins[!is.na(bins)]
fracts <- as.numeric(table(bins) / sum(table(bins)))
nbins <- length(fracts)
vc <- -sum(fracts * log(fracts) / log(nbins))
return(vc)
}
out_frame[i, "fci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$fci
out_frame[i, "lci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$lci
out_frame[i, "sci_solbergetal2009"] <- solbergcover(als = plot_points)
out_frame[i, "dns_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$dns
out_frame[i, "cov_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$cov
out_frame[i, "f_gav"] <- gav(x = first$V5)
out_frame[i, "l_gav"] <- gav(x = last$V5)
out_frame[i, "i_gav"] <- gav(x = mid$V5)
out_frame[i, "vc_1m"] <- vc(als = plot_points, bin = 1)
out_frame[i, "vc_2m"] <-   vc(als = plot_points, bin = 2)
als = plot_points
in = 1)
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
bin = 2
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
maxbin
als$V5
bins <- cut(als$V5, breaks = seq(0, maxbin, bin), right = FALSE,
labels = (seq(0, (maxbin - bin), bin) + bin / 2))
vc(als = plot_points, bin = 1)
vc <- function(als, bin = 1) {
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
if (maxbin >= bin) {
bins <- cut(als$V5, breaks = seq(0, maxbin, bin), right = FALSE,
labels = (seq(0, (maxbin - bin), bin) + bin / 2))
# remove NAs that are outside the "complete" bins
bins <- bins[!is.na(bins)]
fracts <- as.numeric(table(bins) / sum(table(bins)))
nbins <- length(fracts)
vc <- -sum(fracts * log(fracts) / log(nbins))
} else {
vc <- NaN
}
return(vc)
}
out_frame[i, "vc_1m"] <- vc(als = plot_points, bin = 1)
out_frame[i, "vc_2m"] <-   vc(als = plot_points, bin = 2)
rm(list=ls())
require(data.table)
require(tidyverse)
work_folder <- "Y:\\users\\L2682\\smk_2018_circle_dz\\plot_circ\\"
als_data <- fread(paste0(work_folder,
"smk_circplots_dz.txt"))
# Loop over plots and compute some additional metrics
# Cover indices: FCI; LCI
# average square height: qav: sum(X^2)/n
# vc with 1 and 2 meter bins
unique_plots <- unique(als_data$V1)
out_frame <- data.frame(plot_cell_id = unique_plots,
fci_korhetal2011_1.3m = 0,
lci_korhetal2011_1.3m = 0,
sci_solbergetal2009 = 0,
dns_1.3m = 0,
cov_1.3m = 0,
f_gav = 0,
l_gav = 0,
i_gav = 0,
vc_1m = 0,
vc_2m = 0)
for (i in 1:length(unique_plots)) {
plot_points <- als_data[V1 == unique_plots[i], ]
first <- plot_points[V7 == 0 | V7 == 1]
last <- plot_points[V7 == 0 | V7 == 3]
mid <- plot_points[V7 == 2]
# gav
gav <- function (x) {sum(x^2) / length(x)}
# fci Korhonen et al. 2011
fci_lci <- function (als, threshold = 1.3) {
# fci
R_Tsingle <- nrow(als[V7 == 0 & V5 >= threshold])
R_Tfirst <- nrow(als[V7 == 1 & V5 >= threshold])
R_allsingle <- nrow(als[V7 == 0])
R_allfirst <- nrow(als[(V7 == 1)])
# lci
R_Tlast <- nrow(als[V7 == 3 & V5 >= threshold])
R_alllast <- nrow(als[(V7 == 3)])
return(data.frame(fci = (R_Tsingle + R_Tfirst) / (R_allsingle + R_allfirst),
lci = (R_Tsingle + R_Tlast) / (R_allsingle + R_alllast)))
}
cov_dns <- function (als, threshold = 1.3) {
Tfirst <- nrow(als[(V7 == 1 | V7 == 0) & V5 >= threshold])
all_first <- nrow(als[(V7 == 1 | V7 == 0)])
all_T <-   nrow(als[V5 >= threshold])
all <- nrow(als)
return(data.frame(cov = Tfirst / all_first * 100,
dns = all_T / all * 100))
}
solbergcover <- function(als) {
single_ground <- nrow(als[V9 == 2 & V7 == 0])
single_all <- nrow(als[V7 == 0])
first_ground <- nrow(als[V9 == 2 & V7 == 1])
last_ground <- nrow(als[V9 == 2 & V7 == 3])
first_all <- nrow(als[V7 == 1])
last_all <- nrow(als[V7 == 3])
upper <- single_ground + 0.5 * (first_ground + last_ground)
bottom <- single_all + 0.5 * (first_all + last_all)
return(1 - upper / bottom)
}
vc <- function(als, bin = 1) {
# establish height bins
# Define max bin
if (bin == 1) {
maxbin <- floor(max(als$V5))
} else {
maxbin <- floor(max(als$V5))
if (maxbin %% bin != 0) {
while (maxbin %% 2 != 0) {
maxbin <- maxbin - 1
}
}
}
if (maxbin >= bin) {
bins <- cut(als$V5, breaks = seq(0, maxbin, bin), right = FALSE,
labels = (seq(0, (maxbin - bin), bin) + bin / 2))
# remove NAs that are outside the "complete" bins
bins <- bins[!is.na(bins)]
fracts <- as.numeric(table(bins) / sum(table(bins)))
nbins <- length(fracts)
vc <- -sum(fracts * log(fracts) / log(nbins))
} else {
vc <- NaN
}
return(vc)
}
out_frame[i, "fci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$fci
out_frame[i, "lci_korhetal2011_1.3m"] <- fci_lci(als = plot_points, threshold = 1.3)$lci
out_frame[i, "sci_solbergetal2009"] <- solbergcover(als = plot_points)
out_frame[i, "dns_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$dns
out_frame[i, "cov_1.3m"] <- cov_dns(als = plot_points, threshold = 1.3)$cov
out_frame[i, "f_gav"] <- gav(x = first$V5)
out_frame[i, "l_gav"] <- gav(x = last$V5)
out_frame[i, "i_gav"] <- gav(x = mid$V5)
out_frame[i, "vc_1m"] <- vc(als = plot_points, bin = 1)
out_frame[i, "vc_2m"] <-   vc(als = plot_points, bin = 2)
}
write.table(out_frame, paste0(work_folder, "additional_smkplots_metrics.txt"), col.names = TRUE, row.names = F, quote = F)
rm(list=ls())
